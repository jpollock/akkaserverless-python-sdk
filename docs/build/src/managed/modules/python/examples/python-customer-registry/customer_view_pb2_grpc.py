# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import customer_domain_pb2 as customer__domain__pb2
import customer_view_pb2 as customer__view__pb2
from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2


class CustomerByNameStub(object):
    """end::declarations[]

    tag::service[]
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateCustomer = channel.unary_unary(
                '/customer.view.CustomerByName/UpdateCustomer',
                request_serializer=customer__domain__pb2.CustomerState.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )
        self.GetCustomers = channel.unary_stream(
                '/customer.view.CustomerByName/GetCustomers',
                request_serializer=customer__view__pb2.ByNameRequest.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )


class CustomerByNameServicer(object):
    """end::declarations[]

    tag::service[]
    """

    def UpdateCustomer(self, request, context):
        """<1>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCustomers(self, request, context):
        """<4>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomerByNameServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCustomer,
                    request_deserializer=customer__domain__pb2.CustomerState.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
            'GetCustomers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCustomers,
                    request_deserializer=customer__view__pb2.ByNameRequest.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'customer.view.CustomerByName', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CustomerByName(object):
    """end::declarations[]

    tag::service[]
    """

    @staticmethod
    def UpdateCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomerByName/UpdateCustomer',
            customer__domain__pb2.CustomerState.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCustomers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/customer.view.CustomerByName/GetCustomers',
            customer__view__pb2.ByNameRequest.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CustomerByEmailStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateCustomer = channel.unary_unary(
                '/customer.view.CustomerByEmail/UpdateCustomer',
                request_serializer=customer__domain__pb2.CustomerState.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )
        self.GetCustomer = channel.unary_unary(
                '/customer.view.CustomerByEmail/GetCustomer',
                request_serializer=customer__view__pb2.ByEmailRequest.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )


class CustomerByEmailServicer(object):
    """Missing associated documentation comment in .proto file."""

    def UpdateCustomer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCustomer(self, request, context):
        """tag::unary[]
        <1>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomerByEmailServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCustomer,
                    request_deserializer=customer__domain__pb2.CustomerState.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
            'GetCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCustomer,
                    request_deserializer=customer__view__pb2.ByEmailRequest.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'customer.view.CustomerByEmail', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CustomerByEmail(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def UpdateCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomerByEmail/UpdateCustomer',
            customer__domain__pb2.CustomerState.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomerByEmail/GetCustomer',
            customer__view__pb2.ByEmailRequest.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CustomerSummaryByNameStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCustomers = channel.unary_stream(
                '/customer.view.CustomerSummaryByName/GetCustomers',
                request_serializer=customer__view__pb2.ByNameRequest.SerializeToString,
                response_deserializer=customer__view__pb2.CustomerSummary.FromString,
                )
        self.UpdateCustomer = channel.unary_unary(
                '/customer.view.CustomerSummaryByName/UpdateCustomer',
                request_serializer=customer__domain__pb2.CustomerState.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )


class CustomerSummaryByNameServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCustomers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCustomer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomerSummaryByNameServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCustomers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCustomers,
                    request_deserializer=customer__view__pb2.ByNameRequest.FromString,
                    response_serializer=customer__view__pb2.CustomerSummary.SerializeToString,
            ),
            'UpdateCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCustomer,
                    request_deserializer=customer__domain__pb2.CustomerState.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'customer.view.CustomerSummaryByName', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CustomerSummaryByName(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCustomers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/customer.view.CustomerSummaryByName/GetCustomers',
            customer__view__pb2.ByNameRequest.SerializeToString,
            customer__view__pb2.CustomerSummary.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomerSummaryByName/UpdateCustomer',
            customer__domain__pb2.CustomerState.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CustomersResponseByNameStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCustomers = channel.unary_unary(
                '/customer.view.CustomersResponseByName/GetCustomers',
                request_serializer=customer__view__pb2.ByNameRequest.SerializeToString,
                response_deserializer=customer__view__pb2.CustomersResponse.FromString,
                )
        self.UpdateCustomer = channel.unary_unary(
                '/customer.view.CustomersResponseByName/UpdateCustomer',
                request_serializer=customer__domain__pb2.CustomerState.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )


class CustomersResponseByNameServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetCustomers(self, request, context):
        """<2>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateCustomer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomersResponseByNameServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCustomers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCustomers,
                    request_deserializer=customer__view__pb2.ByNameRequest.FromString,
                    response_serializer=customer__view__pb2.CustomersResponse.SerializeToString,
            ),
            'UpdateCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateCustomer,
                    request_deserializer=customer__domain__pb2.CustomerState.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'customer.view.CustomersResponseByName', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CustomersResponseByName(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetCustomers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomersResponseByName/GetCustomers',
            customer__view__pb2.ByNameRequest.SerializeToString,
            customer__view__pb2.CustomersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomersResponseByName/UpdateCustomer',
            customer__domain__pb2.CustomerState.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CustomerByNameViewStub(object):
    """tag::service-event-sourced[]
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessCustomerCreated = channel.unary_unary(
                '/customer.view.CustomerByNameView/ProcessCustomerCreated',
                request_serializer=customer__domain__pb2.CustomerCreated.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )
        self.ProcessCustomerNameChanged = channel.unary_unary(
                '/customer.view.CustomerByNameView/ProcessCustomerNameChanged',
                request_serializer=customer__domain__pb2.CustomerNameChanged.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )
        self.IgnoreOtherEvents = channel.unary_unary(
                '/customer.view.CustomerByNameView/IgnoreOtherEvents',
                request_serializer=google_dot_protobuf_dot_any__pb2.Any.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )
        self.GetCustomers = channel.unary_stream(
                '/customer.view.CustomerByNameView/GetCustomers',
                request_serializer=customer__view__pb2.ByNameRequest.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )


class CustomerByNameViewServicer(object):
    """tag::service-event-sourced[]
    """

    def ProcessCustomerCreated(self, request, context):
        """<1>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessCustomerNameChanged(self, request, context):
        """<4>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IgnoreOtherEvents(self, request, context):
        """<7>
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCustomers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomerByNameViewServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessCustomerCreated': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessCustomerCreated,
                    request_deserializer=customer__domain__pb2.CustomerCreated.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
            'ProcessCustomerNameChanged': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessCustomerNameChanged,
                    request_deserializer=customer__domain__pb2.CustomerNameChanged.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
            'IgnoreOtherEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.IgnoreOtherEvents,
                    request_deserializer=google_dot_protobuf_dot_any__pb2.Any.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
            'GetCustomers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCustomers,
                    request_deserializer=customer__view__pb2.ByNameRequest.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'customer.view.CustomerByNameView', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CustomerByNameView(object):
    """tag::service-event-sourced[]
    """

    @staticmethod
    def ProcessCustomerCreated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomerByNameView/ProcessCustomerCreated',
            customer__domain__pb2.CustomerCreated.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessCustomerNameChanged(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomerByNameView/ProcessCustomerNameChanged',
            customer__domain__pb2.CustomerNameChanged.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IgnoreOtherEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomerByNameView/IgnoreOtherEvents',
            google_dot_protobuf_dot_any__pb2.Any.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCustomers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/customer.view.CustomerByNameView/GetCustomers',
            customer__view__pb2.ByNameRequest.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CustomerByNameViewFromTopicStub(object):
    """tag::service-topic[]
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessCustomerCreated = channel.unary_unary(
                '/customer.view.CustomerByNameViewFromTopic/ProcessCustomerCreated',
                request_serializer=customer__domain__pb2.CustomerCreated.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )
        self.ProcessCustomerNameChanged = channel.unary_unary(
                '/customer.view.CustomerByNameViewFromTopic/ProcessCustomerNameChanged',
                request_serializer=customer__domain__pb2.CustomerNameChanged.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )
        self.IgnoreOtherEvents = channel.unary_unary(
                '/customer.view.CustomerByNameViewFromTopic/IgnoreOtherEvents',
                request_serializer=google_dot_protobuf_dot_any__pb2.Any.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )
        self.GetCustomers = channel.unary_stream(
                '/customer.view.CustomerByNameViewFromTopic/GetCustomers',
                request_serializer=customer__view__pb2.ByNameRequest.SerializeToString,
                response_deserializer=customer__domain__pb2.CustomerState.FromString,
                )


class CustomerByNameViewFromTopicServicer(object):
    """tag::service-topic[]
    """

    def ProcessCustomerCreated(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProcessCustomerNameChanged(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IgnoreOtherEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCustomers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomerByNameViewFromTopicServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessCustomerCreated': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessCustomerCreated,
                    request_deserializer=customer__domain__pb2.CustomerCreated.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
            'ProcessCustomerNameChanged': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessCustomerNameChanged,
                    request_deserializer=customer__domain__pb2.CustomerNameChanged.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
            'IgnoreOtherEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.IgnoreOtherEvents,
                    request_deserializer=google_dot_protobuf_dot_any__pb2.Any.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
            'GetCustomers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCustomers,
                    request_deserializer=customer__view__pb2.ByNameRequest.FromString,
                    response_serializer=customer__domain__pb2.CustomerState.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'customer.view.CustomerByNameViewFromTopic', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CustomerByNameViewFromTopic(object):
    """tag::service-topic[]
    """

    @staticmethod
    def ProcessCustomerCreated(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomerByNameViewFromTopic/ProcessCustomerCreated',
            customer__domain__pb2.CustomerCreated.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProcessCustomerNameChanged(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomerByNameViewFromTopic/ProcessCustomerNameChanged',
            customer__domain__pb2.CustomerNameChanged.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IgnoreOtherEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/customer.view.CustomerByNameViewFromTopic/IgnoreOtherEvents',
            google_dot_protobuf_dot_any__pb2.Any.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCustomers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/customer.view.CustomerByNameViewFromTopic/GetCustomers',
            customer__view__pb2.ByNameRequest.SerializeToString,
            customer__domain__pb2.CustomerState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
